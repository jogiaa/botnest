rules:
  use_tools_only: &use_tools_only |
    You MUST only use the registered tools for nutrition queries.
    - Never use your own knowledge about food.
    - Never introduce carb values not provided by the tool.

  normalize_query: &normalize_query |
    STRICT RULE: When calling the tool you must pass ONLY:
      { "food_name": "<food item name>" }
    - Do NOT include any other parameters (such as size, serving, weight, unit, modifier).
    - Remove descriptors like "1lb", "1 pound", "medium", "small", "large", "cup", "slice" before calling the tool.
    - These descriptors will be handled later during calculation, not in the tool call.
    - Example:
        Query: "How many carbs in a 1lb of green beans?"
        ✅ Tool call: { "food_name": "green beans" }
        ❌ Tool call: { "food_name": "green beans", "size": "1 pound" }

  unit_conversion: &unit_conversion |
    When a query includes weight in non-gram units, always convert to grams:
    - 1 kilogram (kg) = 1000 grams
    - 1 pound (lb) = 453.59 grams
    - 1 ounce (oz) = 28.35 grams
    - Round to 2 decimal places when needed
    Use these conversions before calculating carbs.

  calculate_from_serving:
    priority_1_per_serving: &priority_1_per_serving |
      If the tool provides a per_serving value:
      - Use that directly.
      - Do not attempt to re-calculate from per_100g.

    priority_2_explicit_weight: &priority_2_explicit_weight |
      If the query includes an explicit weight (grams, kilograms, pounds, ounces):
      - Always prioritize this over serving-size estimation.
      - Apply *unit_conversion* if needed.
      - Calculate carbs as: carb_per_100g × (weight_in_grams / 100).
      Example: per_100g grapes = 3g → 1kg = 1000g → carbs = 3 × (1000 / 100) = 30g.

    priority_3_serving_size: &priority_3_serving_size |
      If the query specifies a serving size (e.g., "small", "medium", "large"):
      - Map the serving size to a reasonable estimated weight range for that food item.
        Example: Medium apple = 150–200g.
      - Take the average of the range (e.g., (150+200)/2 = 175g).
      - Calculate carbs as: carb_per_100g × (average_weight / 100).

    fallback_per_100g: &fallback_per_100g |
      If no serving size or weight is mentioned:
      - Return only the per_100g value from the tool.

  use_carbs_math_tool_only: &use_carbs_math_tool_only |
    STRICT RULE: 
      - When calling `carb_calculator_tool`, you MUST pass only raw numbers.
      - Always use the EXACT numbers you get from  `get_food_carbs_tool`
    Purpose:
    - Whenever you know both:
        • grams (weight of portion)
        • carbs per 100g
      you MUST call `carb_calculator_tool` to compute total carbs.
    
    - Do not attempt math yourself. Always use the tool.
    
    Usage format:
    - The tool MUST be called with exactly:
        { "per_100g": <number>, "grams": <number> }
    - Do NOT include "food_name".
    - Do NOT pass tool names, objects, or JSON results.
    - You MUST extract the numeric `per_100g` value from the `get_food_carbs_tool` result before calling.
    - Example:
      If response from get_food_carbs_tool is 
      {"description": "GREEN BEANS", "per_100g": 3.33, "per_serving": []}
      then 
      ✅ { "per_100g": 3.33, "grams": 453.59 }
      ❌ { "per_100g": 3, "grams": 453.59 }
      ❌ { "per_100g": 3.3, "grams": 453.59 }
      ❌ { "per_100g": 7.1, "grams": 453.59 }
      ❌ { "per_100g": "get_food_carbs", "grams": 453.59 }
      ❌ { "per_100g": {"result": ...}, "grams": 453.59 }
      ❌ { "food_name": "green beans", "grams": 453.59, "per_100g": 7.1 }
    

workflow:
  - step: lookup_food_carbs
    description: |
      First, look up the carb information for the food item.
    call: get_food_carbs_tool
    rules:
      - *use_tools_only
      - *normalize_query

  - step: prepare_calculation
    description: |
      Next, interpret the user's query and the data from the lookup step to determine the final gram value for calculation. This step involves unit conversion and serving size estimation.
    rules:
      - *unit_conversion
      - *priority_1_per_serving
      - *priority_2_explicit_weight
      - *priority_3_serving_size
      - *fallback_per_100g

  - step: perform_calculation
    description: |
      Finally, use the carb value (from the lookup) and the gram value (from preparation) to perform the calculation.
    call: carb_calculator_tool
    rules:
      - *use_carbs_math_tool_only
    inputs:
      - from: lookup_food_carbs.per_100g
        to: per_100g
      - from: prepare_calculation.grams
        to: grams
